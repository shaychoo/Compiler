package IC.Parser;

import java_cup.runtime.*;
import IC.AST.*;

import java.util.LinkedList;
import java.util.List;

parser code  {:
	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;

	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}

	public int getLine() {
		return lexer.getLineNumber();
	}

	public void syntax_error(Symbol s) {
		Token tok = (Token) s;
		System.out.println("Line " + tok.getLine()+": Syntax error; unexpected " + tok);
	}
:}

// This is just for debugging
scan with {:
	Token t = lexer.next_token();
	if (printTokens)
		System.out.println(t.getLine() + ":" + t);
	return t;
:};




////////////////////////////////////////////
// Symbol list (terminals and non-terminals)



//////////////////////////
// Precedence declarations

//////////////
// The grammar

non terminal Program Program;
non terminal Literal Literal;
non terminal Expression expr;
non terminal Statement statement;
non terminal StatementsBlock statementsBlock;
non terminal List<ICClass> class_list;
non terminal ICClass class;



terminal LP,RP,ASSIGN,BOOLEAN,BREAK,COMMA,CONTINUE,DIVIDE;
terminal DOT,EQUAL,EXTENDS,FALSE,ELSE,GT,GTE,IF,INT,LAND;
terminal LB,LCBR,LENGTH,LENG,LOR,LT,LTE,MINUS,MOD,MULTIPLY;
terminal NEQUAL,NULL,PLUS,RB,RCBR,RETURN,SEMI,STATIC,CLASS;
terminal THIS,TRUE,VOID,WHILE,STRING,CLASS_ID,IDENT;

terminal READI, PRINT;
terminal Integer NUMBER;
terminal String VAR;
terminal Integer INTEGER;


precedence left LOR;
precedence left LAND;
precedence left PLUS, MINUS;
precedence left DIVIDE, MULTIPLY;
precedence left MINUS;
precedence left GT, LT, GTE, LTE;


program ::= class_list:cl
      {: RESULT = new Program(getLine(), cl); :}
;

class_list ::= class:c
      {: RESULT = new LinkedList<ICClass>();
         RESULT.add(c);
      :}
      | class_list:cl class:c
      {: cl.add(c); RESULT = cl; :}
;

