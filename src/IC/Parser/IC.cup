package IC.Parser;

import java_cup.runtime.*;
import IC.AST.*;
import IC.*;

import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
parser code {:


	/**
	 * Causes the parsr to print every token it reads. useful for debugging
	 */
	public boolean printTokens;

	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}

	public int getLine() {
		return lexer.getLineNumber();
	}

	public void syntax_error(Symbol s) {
		Token token = (Token) s;
		System.out.println("Line " + token.getLine()+": Syntax error; unexpected " + token.getTokenValue());
	}
:};
// This is just for debugging
scan with {:
	Token t = lexer.next_token();
	if (printTokens)
		System.out.println(t.getLine() + ":" + t.getTokenValue());
	return t;
:};

////////////////////////////////////////////
// Symbol list (terminals and non-terminals)

non terminal Program program;
non terminal ICClass class;
non terminal List<ICClass> class_list;
non terminal Field	field;
non terminal List<Field> fields;
non terminal List<Field> fieldsinrow;
non terminal Method	method;
non terminal Type	type;
non terminal Type voidType;
non terminal Formal formal;
non terminal List<Formal> formals;
non terminal List<Formal> extraFormalsList;
non terminal Statement statement;
non terminal Statement entireScopeStmt;
non terminal StatementsBlock stmt_list;
non terminal If ifStatement;
non terminal Expression expr;
non terminal List<Expression> exprList, extraExprList, actuaLPams, properActuaLPams;
non terminal Type returnType;
non terminal ClassContents classcontents;
non terminal Location location;
non terminal Call call;
non terminal Literal literal;
non terminal StaticCall staticCall;
non terminal VirtualCall virtualCall;
non terminal BinaryOp binaryOp;
non terminal UnaryOp unaryOp;



terminal String INTEGER; // change to integer
terminal String  QUOTE;
terminal String IDENT, CLASS_ID;
terminal String FALSE, TRUE; // change to integer
terminal LENGTH, NEQUAL, EQUAL, RP, SEMI, DOT, LP, PLUS, MINUS, MULTIPLY, DIVIDE, GT, GTE, LT, LTE, LB, LCBR, RCBR, RB, LNEG, LAND, LOR, MOD, COMMA,
		 IF, ASSIGN, BREAK, CLASS, CONTINUE, EXTENDS, ELSE, NEW, RETURN, THIS, VOID, WHILE, STATIC;
terminal INT, STRING, BOOLEAN, UMINUS;
terminal NULL;


//////////////////////////
// Precedence declarations

precedence right ASSIGN;
precedence left LOR;
precedence left LAND;
precedence left EQUAL, NEQUAL;
precedence left GTE, GT, LT, LTE;
precedence left MINUS, PLUS;
precedence left MULTIPLY, DIVIDE, MOD;
precedence right UMINUS, LNEG;
precedence left DOT, LP, RP, LB, RB;
precedence left ELSE;

//////////////
// The grammar

program ::= class_list:classList

	{:
		RESULT = new Program(classList);
	:};

class_list ::= class:cl class_list:classList
	{:
		classList.addFirst(cl);
		RESULT = classList;
	:}
	|
	{:
		RESULT = new LinkedList<ICClass>();
	:};

class ::= CLASS CLASS_ID:className LCBR classcontents:members RCBR
		{:
			RESULT = new ICClass(
				classKeyword.getLine(),
				className.toString(),
				members.fields,
				members.methods);
		:}
		| CLASS CLASS_ID:className EXTENDS CLASS_ID:superClassName LCBR classcontents:members RCBR
		{:
			RESULT = new ICClass(
				classKeyword.getLine(),
				className.toString(),
				superClassName.toString(),
				members.fields,
				members.methods
			);
		:};

classcontents ::= fields:clFields classcontents:clMemberList
	{:
		clMemberList.fields.addAll(0, clFields);
		RESULT = clMemberList;
	:}
	| method:clMethod classcontents:clMemberList
	{:
		clMemberList.methods.addFirst(clMethod);
		RESULT = clMemberList;
	:}
	|
	{:
		RESULT = new ClassMembersList();
	:};

fields ::= type:fieldType IDENT:id fieldsinrow:extraFieldIdListInstance SEMI
	{:
		RESULT = new LinkedList<Field>();
		RESULT.add(new Field(fieldType, id.toString()));
		for (String fieldId : extraFieldIdListInstance) {
			RESULT.add(new Field(fieldType, fieldId));
		}
	:};

fieldsinrow ::= COMMA IDENT:id fieldsinrow:fieldIdListInstance
	{:
		fieldIdListInstance.addFirst(id.toString());
		RESULT = fieldIdListInstance;
	:}
	|
	{:
		RESULT = new LinkedList<String>();
	:};

method ::= type:returnValueType IDENT:methodName LP formals:methodParams RP LCBR stmt_list:statements RCBR
	{:
		RESULT = new VirtualMethod(returnValueType, methodName.toString(), methodParams, statements);
	:}
	| voidType IDENT:methodName LP formals:methodParams RP LCBR stmt_list:statements RCBR
	{:
		RESULT = new VirtualMethod(returnValueType, methodName.toString(), methodParams, statements);
	:}
	| STATIC type:returnValueType IDENT:methodName LP formals:methodParams RP LCBR stmt_list:statements RCBR
	{:
		RESULT = new StaticMethod(returnValueType, methodName.toString(), methodParams, statements);
	:}
	| STATIC voidType IDENT:methodName LP formals:methodParams RP LCBR stmt_list:statements RCBR
	{:
		RESULT = new StaticMethod(returnValueType, methodName.toString(), methodParams, statements);
	:};

formals ::= type:paramType IDENT:paramName extraFormalsList:extraFormalsListInstance
	{:
		RESULT = new LinkedList<Formal>();
		RESULT.add(new Formal(paramType, paramName.toString()));
		RESULT.addAll(extraFormalsListInstance);
	:}
	|
	{:
		RESULT = new LinkedList<Formal>();
	:};

extraFormalsList ::= COMMA type:paramType IDENT:paramName extraFormalsList:extraFormalsListInstance
	{:
		extraFormalsListInstance.addFirst(new Formal(paramType, paramName.toString()));
		RESULT = extraFormalsListInstance;
	:}
	|
	{:
		RESULT = new LinkedList<Formal>();
	:};

stmt_list ::= statement:statement stmt_list:statementList
	{:
		statementList.addFirst(statement);
		RESULT = statementList;
	:}
	|
	{:
		RESULT = new LinkedList<Statement>();
	:};

type ::= INT
	{:
		RESULT = new PrimitiveType(typeKeyword.getLine(), DataTypes.INT);
	:}
	| BOOLEAN
	{:
		RESULT = new PrimitiveType(typeKeyword.getLine(), DataTypes.BOOLEAN);
	:}
	| STRING
	{:
		RESULT = new PrimitiveType(typeKeyword.getLine(), DataTypes.STRING);
	:}
	| CLASS_ID:className
	{:
		RESULT = new UserType(className.getLine(), className.toString());
	:}
	| type:typeInstance LB RB
	{:
		typeInstance.incrementDimension();
		RESULT = typeInstance;
	:};

voidType ::= VOID:voidKeyword
	{:
		RESULT = new PrimitiveType(voidKeyword.getLine(), DataTypes.VOID);
	:};

statement ::= entireScopeStmt:entireScopeStatement
	{:
		RESULT = entireScopeStatement;
	:}
	| type:varType IDENT:varName SEMI
	{:
		RESULT = new LocalVariable(varType, varName.toString());
	:}
	| type:varType IDENT:varName ASSIGN expr:initValue SEMI
	{:
		RESULT = new LocalVariable(varType, varName.toString(), initValue);
	:}
	| error SEMI;

entireScopeStmt ::= location:loc ASSIGN expr:exp SEMI
	{:
		RESULT = new Assignment(loc, exp);
	:}
	| call:callInstance SEMI
	{:
		RESULT = new CallStatement(callInstance);
	:}
	| RETURN:returnKeyword SEMI
	{:
		RESULT = new Return(returnKeyword.getLine());
	:}
	| RETURN:returnKeyword expr:exp SEMI
	{:
		RESULT = new Return(returnKeyword.getLine(), exp);
	:}
	| IF LP expr:cond RP entireScopeStmt:thenOperation ELSE entireScopeStmt:elseOperation
	{:
		RESULT = new If(cond, thenOperation, elseOperation);
	:}
	| IF LP expr:cond RP entireScopeStmt:thenOperation
	{:
		RESULT = new If(cond, thenOperation);
	:}
	| WHILE LP expr:cond RP entireScopeStmt:operation
	{:
		RESULT = new While(cond, operation);
	:}
	| BREAK:breakKeyword SEMI
	{:
		RESULT = new Break(breakKeyword.getLine());
	:}
	| CONTINUE:continueKeyword SEMI
	{:
		RESULT = new Continue(continueKeyword.getLine());
	:}
	| LCBR:startOfBlockStatement stmt_list:blockStatements RCBR
	{:
		RESULT = new StatementsBlock(startOfBlockStatement.getLine(), blockStatements);
	:};

expr ::= location:locationInstace
	{:
		RESULT = locationInstace;
	:}
	| call:callInstance
	{:
		RESULT = callInstance;
	:}
	| THIS:thisKeyword
	{:
		RESULT = new This(thisKeyword.getLine());
	:}
	| NEW:newKeyword CLASS_ID:className LP RP
	{:
		RESULT = new NewClass(newKeyword.getLine(), className.toString());
	:}
	| NEW type:elementType LB expr:numberOfElements RB
	{:
		RESULT = new NewArray(elementType, numberOfElements);
	:}
	| expr:arrayExp DOT LENGTH
	{:
		RESULT = new Length(arrayExp);
	:}
	| binaryOp:operation
	{:
		RESULT = operation;
	:}
	| unaryOp:operation
	{:
		RESULT = operation;
	:}
	| literal:literalType
	{:
		RESULT = literalType;
	:}
	| LP expr:exp RP
	{:
		RESULT = new ExpressionBlock(exp);
	:};

call ::= staticCall:callInstance
	{:
		RESULT = callInstance;
	:}
	| virtualCall:callInstance
	{:
		RESULT = callInstance;
	:};

staticCall ::= CLASS_ID:className DOT IDENT:staticMethodName LP exprList:arguments RP
	{:
		RESULT = new StaticCall(
			className.getLine(),
			className.toString(),
			staticMethodName.toString(),
			arguments);
	:};

virtualCall ::= IDENT:methodName LP exprList:arguments RP
	{:
		RESULT = new VirtualCall(methodName.getLine(), methodName.toString(), arguments);
	:}
	| expr:loc DOT IDENT:methodName LP exprList:arguments RP
	{:
		RESULT = new VirtualCall(loc.getLine(), loc, methodName.toString(), arguments);
	:};

exprList ::= expr:firstExpr extraExprList:extraExprListInstance
	{:
		RESULT = new LinkedList<Expression>();
		RESULT.add(firstExpr);
		RESULT.addAll(extraExprListInstance);
	:}
	|
	{:
		RESULT = new LinkedList<Expression>();
	:};

extraExprList ::= COMMA expr:expression extraExprList:extraExprListInstance
	{:
		extraExprListInstance.addFirst(expression);
		RESULT = extraExprListInstance;
	:}
	|
	{:
		RESULT = new LinkedList<Expression>();
	:};

location ::= IDENT:varName
	{:
		RESULT = new VariableLocation(varName.getLine(), varName.toString());
	:}
	| expr:loc DOT IDENT:fieldName
	{:
		RESULT = new VariableLocation(loc.getLine(), loc, fieldName.toString());
	:}
	| expr:arrayExp LB expr:indexExp RB
	{:
		RESULT = new ArrayLocation(arrayExp, indexExp);
	:};

binaryOp ::=
	expr:operand1 PLUS expr:operand2
	{:
		RESULT = new MathBinaryOp(operand1, BinaryOps.PLUS, operand2);
	:}
	| expr:operand1 MINUS expr:operand2
	{:
		RESULT = new MathBinaryOp(operand1, BinaryOps.MINUS, operand2);
	:}
	| expr:operand1 MULTIPLY expr:operand2
	{:
		RESULT = new MathBinaryOp(operand1, BinaryOps.MULTIPLY, operand2);
	:}
	| expr:operand1 DIVIDE expr:operand2
	{:
		RESULT = new MathBinaryOp(operand1, BinaryOps.DIVIDE, operand2);
	:}
	| expr:operand1 MOD expr:operand2
	{:
		RESULT = new MathBinaryOp(operand1, BinaryOps.MOD, operand2);
	:}
	| expr:operand1 LAND expr:operand2
	{:
		RESULT = new LogicalBinaryOp(operand1, BinaryOps.LAND, operand2);
	:}
	| expr:operand1 LOR expr:operand2
	{:
		RESULT = new LogicalBinaryOp(operand1, BinaryOps.LOR, operand2);
	:}
	| expr:operand1 LT expr:operand2
	{:
		RESULT = new LogicalBinaryOp(operand1, BinaryOps.LT, operand2);
	:}
	| expr:operand1 LTE expr:operand2
	{:
		RESULT = new LogicalBinaryOp(operand1, BinaryOps.LTE, operand2);
	:}
	| expr:operand1 GT expr:operand2
	{:
		RESULT = new LogicalBinaryOp(operand1, BinaryOps.GT, operand2);
	:}
	| expr:operand1 GTE expr:operand2
	{:
		RESULT = new LogicalBinaryOp(operand1, BinaryOps.GTE, operand2);
	:}
	| expr:operand1 EQUAL expr:operand2
	{:
		RESULT = new LogicalBinaryOp(operand1, BinaryOps.EQUAL, operand2);
	:}
	| expr:operand1 NEQUAL expr:operand2
	{:
		RESULT = new LogicalBinaryOp(operand1, BinaryOps.NEQUAL, operand2);
	:};

unaryOp ::= MINUS expr:operand
	{:
		RESULT = new MathUnaryOp(UnaryOps.UMINUS, operand);
	:} %prec UMINUS
	| LNEG expr:operand
	{:
		RESULT = new LogicalUnaryOp(UnaryOps.LNEG, operand);
	:};

literal ::= INTEGER:intVal
	{:
		try {
			int integerValue = Integer.parseInt(intVal.toString());
			RESULT = new Literal(intVal.getLine(), LiteralTypes.INTEGER, integerValue);
		} catch (NumberFormatException e) {
			this.parser.didHadSyntaxErrors = true;
			String parseErrorMessage =
				intVal.getLine() + ":" + intVal.getColumn() +
				" : syntax error; numeric literal out of range: " + intVal.toString();
			throw new ParsingError(parseErrorMessage);
		}
	:}
	| STRING:strVal
	{:
		RESULT = new Literal(strVal.getLine(), LiteralTypes.STRING, strVal.toString());
	:}
	| TRUE:trueKeyword
	{:
		RESULT = new Literal(trueKeyword.getLine(), LiteralTypes.TRUE);
	:}
	| FALSE:falseKeyword
	{:
		RESULT = new Literal(falseKeyword.getLine(), LiteralTypes.FALSE);
	:}
	| NULL:nullKeyword
	{:
		RESULT = new Literal(nullKeyword.getLine(), LiteralTypes.NULL);
	:};
