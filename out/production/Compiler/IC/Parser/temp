package IC.Parser;

import java_cup.runtime.*;
import IC.AST.*;

import java.util.LinkedList;
import java.util.List;

parser code  {:
	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;

	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}

	public int getLine() {
		return lexer.getLineNumber();
	}

	public void syntax_error(Symbol s) {
		Token tok = (Token) s;
		System.out.println("Line " + tok.getLine()+": Syntax error; unexpected " + tok);
	}
:}

// This is just for debugging
scan with {:
	Token t = lexer.next_token();
	if (printTokens)
		System.out.println(t.getLine() + ":" + t);
	return t;
:};




////////////////////////////////////////////
// Symbol list (terminals and non-terminals)



//////////////////////////
// Precedence declarations

//////////////
// The grammar

non terminal Program Program;
non terminal Literal Literal;
non terminal Expression expr;
non terminal Statement statement;
non terminal StatementsBlock statementsBlock;
non terminal List<ICClass> class_list;
non terminal ICClass class;



terminal PLUS, MINUS, MULT, DIV, LPAREN, RPAREN, SEMI, ASSIGN, GT, LT, GE, LE, LAND, LOR;
terminal READI, PRINT;
terminal Integer NUMBER;
terminal String VAR;
terminal Integer INTEGER;


precedence left LOR;
precedence left LAND;
precedence left PLUS, MINUS;
precedence left DIV, MULT;
precedence left MINUS;
precedence left GT, LT, GE, LE;


program ::= class_list:cl
      {: RESULT = new Program(getLine(), cl); :}
;

class_list ::= class:c
      {: RESULT = new LinkedList<ICClass>();
         RESULT.add(c);
      :}
      | class_list:cl class:c
      {: cl.add(c); RESULT = cl; :}
;





statementsBlock ::= statement:s
	{: RESULT = new StatementsBlock(s); :}
	| statementsBlock:sl statement:s
	{: sl.addStmt(s); RESULT = sl; :}
;

statement ::= VAR:v ASSIGN expr:e SEMI
	{: VarExpr ve = new VarExpr(v); RESULT = new AssignStmt(ve, e); :}
	| PRINT LPAREN expr:e RPAREN SEMI
	{: RESULT = new PrintStmt(e); :}
;

expr ::= expr:e1 PLUS:p expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.PLUS);
		   System.out.println("Reduced rule e1 + e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 MINUS expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.MINUS);
		   System.out.println("Reduced rule e1 - e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 MULT expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.MULT);
		   System.out.println("Reduced rule e1 * e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 DIV expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.DIV);
		   System.out.println("Reduced rule e1 / e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 LAND expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.LAND);
		   System.out.println("Reduced rule e1 && e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 LOR expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.LOR);
		   System.out.println("Reduced rule e1 || e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 LT expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.LT);
		   System.out.println("Reduced rule e1 < e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 GT expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.GT);
		   System.out.println("Reduced rule e1 > e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 LE expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.LE);
		   System.out.println("Reduced rule e1 <= e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| expr:e1 GE expr:e2
		{: RESULT = new BinaryOpExpr(e1, e2, Operator.GE);
		   System.out.println("Reduced rule e1 >= e2 for e1=" + e1 + " and e2="+e2);
		 :}
		| MINUS expr:e1
		{: RESULT = new UnaryOpExpr(e1, Operator.MINUS); :} %prec MINUS
		| LPAREN expr:e RPAREN
		{: RESULT = e; :}
		| NUMBER:n
		{: RESULT = new NumberExpr(n.intValue()); :}
		| READI LPAREN RPAREN
		{: RESULT = new ReadIExpr(); :}
		| VAR:v
		{: RESULT = new VarExpr(v); :}
;


